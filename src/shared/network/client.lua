--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.25 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		WeaponSessionSync = table.freeze({
			On = noop
		}),
		RequestSessionState = table.freeze({
			Fire = noop
		}),
		ReloadWeapon = table.freeze({
			Fire = noop
		}),
		PlayerSessionSync = table.freeze({
			On = noop
		}),
		FireWeapon = table.freeze({
			Fire = noop
		}),
		EquipWeapon = table.freeze({
			Call = noop
		}),
		CreateWeapon = table.freeze({
			Call = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")

local unreliable = { remotes:WaitForChild("ZAP_UNRELIABLE_0") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")

local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(4)
local reliable_event_queue: { [number]: { any } } = table.create(4)
local function_call_id = 0
reliable_events[1] = {}
reliable_event_queue[1] = {}
reliable_events[0] = {}
reliable_event_queue[0] = {}
reliable_event_queue[3] = table.create(255)
reliable_event_queue[2] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			local bool_1 = buffer.readu8(incoming_buff, read(1))
			value = {  }
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value["name"] = buffer.readstring(incoming_buff, read(len_1), len_1)
			value["payload"] = {  }
			if not bit32.btest(bool_1, 0b0000000000000001) then
				for _ = 1, buffer.readu16(incoming_buff, read(2)) + 1 do
					local bool_2 = buffer.readu8(incoming_buff, read(1))
					local key_1
					local val_1
					local len_2 = buffer.readu16(incoming_buff, read(2))
					key_1 = buffer.readstring(incoming_buff, read(len_2), len_2)
					if bit32.btest(bool_2, 0b0000000000000001) then
						incoming_ipos = incoming_ipos + 1
						val_1 = incoming_inst[incoming_ipos]
					else
						val_1 = nil
					end
					value["payload"][key_1] = val_1
				end
			end
			if reliable_events[1][1] then
				for _, cb in reliable_events[1] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[1], value)
				if #reliable_event_queue[1] > 64 then
					warn(`[ZAP] {#reliable_event_queue[1]} events in queue for WeaponSessionSync. Did you forget to attach a listener?`)
				end
			end
		elseif id == 0 then
			local value
			local bool_3 = buffer.readu8(incoming_buff, read(1))
			value = {  }
			if not bit32.btest(bool_3, 0b0000000000000001) then
				for _ = 1, buffer.readu16(incoming_buff, read(2)) + 1 do
					local bool_4 = buffer.readu8(incoming_buff, read(1))
					local key_2
					local val_2
					local len_3 = buffer.readu16(incoming_buff, read(2))
					key_2 = buffer.readstring(incoming_buff, read(len_3), len_3)
					if bit32.btest(bool_4, 0b0000000000000001) then
						incoming_ipos = incoming_ipos + 1
						val_2 = incoming_inst[incoming_ipos]
					else
						val_2 = nil
					end
					value[key_2] = val_2
				end
			end
			if reliable_events[0][1] then
				for _, cb in reliable_events[0] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[0], value)
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for PlayerSessionSync. Did you forget to attach a listener?`)
				end
			end
		elseif id == 3 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			local bool_5 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_5, 0b0000000000000001) then
				value = "success"
			else
				value = "fail"
			end
			local thread = reliable_event_queue[3][call_id]
			-- When using actors it's possible for multiple Zap clients to exist, but only one called the Zap remote function.
			if thread then
				task.spawn(thread, value)
			end
			reliable_event_queue[3][call_id] = nil
		elseif id == 2 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			local bool_6 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_6, 0b0000000000000001) then
				value = "success"
			else
				value = "fail"
			end
			local thread = reliable_event_queue[2][call_id]
			-- When using actors it's possible for multiple Zap clients to exist, but only one called the Zap remote function.
			if thread then
				task.spawn(thread, value)
			end
			reliable_event_queue[2][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	WeaponSessionSync = {
		On = function(Callback: (Value: ({
			["name"]: (string),
			["payload"]: ({ [(string)]: ((unknown)) }),
		})) -> ())
			table.insert(reliable_events[1], Callback)
			for _, value in reliable_event_queue[1] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[1] = {}
			return function()
				table.remove(reliable_events[1], table.find(reliable_events[1], Callback))
			end
		end,
	},
	RequestSessionState = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
		end,
	},
	ReloadWeapon = {
		Fire = function()
			local saved = save()
			load_empty()
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	PlayerSessionSync = {
		On = function(Callback: (Value: ({ [(string)]: ((unknown)) })) -> ())
			table.insert(reliable_events[0], Callback)
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[0] = {}
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	FireWeapon = {
		Fire = function(Value: ({
			["unit"]: ({
				["Origin"]: (Vector3),
				["Direction"]: (Vector3),
				["Unit"]: ((unknown)),
			}),
			["fire_point"]: (Vector3),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_7 = 0
			local bool_7_pos_1 = alloc(1)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["unit"]["Origin"].X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["unit"]["Origin"].Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["unit"]["Origin"].Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["unit"]["Direction"].X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["unit"]["Direction"].Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["unit"]["Direction"].Z)
			if Value["unit"]["Unit"] ~= nil then
				bool_7 = bit32.bor(bool_7, 0b0000000000000001)
				table.insert(outgoing_inst, Value["unit"]["Unit"])
			end
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["fire_point"].X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["fire_point"].Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value["fire_point"].Z)
			buffer.writeu8(outgoing_buff, bool_7_pos_1, bool_7)
		end,
	},
	EquipWeapon = {
		Call = function(name: (string)): (("success" | "fail"))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			function_call_id += 1
			function_call_id %= 256
			if reliable_event_queue[3][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			local len_4 = #name
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
			alloc(len_4)
			buffer.writestring(outgoing_buff, outgoing_apos, name, len_4)
			reliable_event_queue[3][function_call_id] = coroutine.running()
			return coroutine.yield()
		end,
	},
	CreateWeapon = {
		Call = function(name: (string)): (("success" | "fail"))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			function_call_id += 1
			function_call_id %= 256
			if reliable_event_queue[2][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			local len_5 = #name
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
			alloc(len_5)
			buffer.writestring(outgoing_buff, outgoing_apos, name, len_5)
			reliable_event_queue[2][function_call_id] = coroutine.running()
			return coroutine.yield()
		end,
	},
}
type Events = typeof(returns)
return returns
