--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.25 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		WeaponSessionSync = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestSessionState = table.freeze({
			On = noop
		}),
		PlayerSessionSync = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		CreateWeapon = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(2)
reliable_events[0] = {}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			for _, cb in reliable_events[0] do
				task.spawn(cb, player, value)
			end
		elseif id == 1 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			if reliable_events[1] then
				task.spawn(function(player_2, call_id_2, value_1)
					local ret_1 = reliable_events[1](player_2, value_1)
					load_player(player_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id_2)
					local bool_1 = 0
					local bool_1_pos_1 = alloc(1)
					if ret_1 == "success" then
						bool_1 = bit32.bor(bool_1, 0b0000000000000001)
					elseif ret_1 == "fail" then
						local _
					else
						error("Invalid enumerator")
					end
					buffer.writeu8(outgoing_buff, bool_1_pos_1, bool_1)
					player_map[player_2] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	WeaponSessionSync = {
		Fire = function(Player: Player, Value: ({ [(string)]: ((unknown)) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_2 = 0
			local bool_2_pos_1 = alloc(1)
			local len_pos_1
			local len_2 = 0
			for k_1, v_1 in Value do
				if len_2 == 0 then
					len_pos_1 = alloc(2)
				end
				local bool_3 = 0
				local bool_3_pos_1 = alloc(1)
				len_2 = len_2 + 1
				local len_3 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				alloc(len_3)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_3)
				if v_1 ~= nil then
					bool_3 = bit32.bor(bool_3, 0b0000000000000001)
					table.insert(outgoing_inst, v_1)
				end
				buffer.writeu8(outgoing_buff, bool_3_pos_1, bool_3)
			end
			if len_pos_1 then
				buffer.writeu16(outgoing_buff, len_pos_1, len_2 - 1)
			else
				bool_2 = bit32.bor(bool_2, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_2_pos_1, bool_2)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_4 = 0
			local bool_4_pos_1 = alloc(1)
			local len_pos_2
			local len_4 = 0
			for k_2, v_2 in Value do
				if len_4 == 0 then
					len_pos_2 = alloc(2)
				end
				local bool_5 = 0
				local bool_5_pos_1 = alloc(1)
				len_4 = len_4 + 1
				local len_5 = #k_2
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
				alloc(len_5)
				buffer.writestring(outgoing_buff, outgoing_apos, k_2, len_5)
				if v_2 ~= nil then
					bool_5 = bit32.bor(bool_5, 0b0000000000000001)
					table.insert(outgoing_inst, v_2)
				end
				buffer.writeu8(outgoing_buff, bool_5_pos_1, bool_5)
			end
			if len_pos_2 then
				buffer.writeu16(outgoing_buff, len_pos_2, len_4 - 1)
			else
				bool_4 = bit32.bor(bool_4, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_4_pos_1, bool_4)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_6 = 0
			local bool_6_pos_1 = alloc(1)
			local len_pos_3
			local len_6 = 0
			for k_3, v_3 in Value do
				if len_6 == 0 then
					len_pos_3 = alloc(2)
				end
				local bool_7 = 0
				local bool_7_pos_1 = alloc(1)
				len_6 = len_6 + 1
				local len_7 = #k_3
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
				alloc(len_7)
				buffer.writestring(outgoing_buff, outgoing_apos, k_3, len_7)
				if v_3 ~= nil then
					bool_7 = bit32.bor(bool_7, 0b0000000000000001)
					table.insert(outgoing_inst, v_3)
				end
				buffer.writeu8(outgoing_buff, bool_7_pos_1, bool_7)
			end
			if len_pos_3 then
				buffer.writeu16(outgoing_buff, len_pos_3, len_6 - 1)
			else
				bool_6 = bit32.bor(bool_6, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_6_pos_1, bool_6)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_8 = 0
			local bool_8_pos_1 = alloc(1)
			local len_pos_4
			local len_8 = 0
			for k_4, v_4 in Value do
				if len_8 == 0 then
					len_pos_4 = alloc(2)
				end
				local bool_9 = 0
				local bool_9_pos_1 = alloc(1)
				len_8 = len_8 + 1
				local len_9 = #k_4
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_9)
				alloc(len_9)
				buffer.writestring(outgoing_buff, outgoing_apos, k_4, len_9)
				if v_4 ~= nil then
					bool_9 = bit32.bor(bool_9, 0b0000000000000001)
					table.insert(outgoing_inst, v_4)
				end
				buffer.writeu8(outgoing_buff, bool_9_pos_1, bool_9)
			end
			if len_pos_4 then
				buffer.writeu16(outgoing_buff, len_pos_4, len_8 - 1)
			else
				bool_8 = bit32.bor(bool_8, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_8_pos_1, bool_8)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local bool_10 = 0
			local bool_10_pos_1 = alloc(1)
			local len_pos_5
			local len_10 = 0
			for k_5, v_5 in Value do
				if len_10 == 0 then
					len_pos_5 = alloc(2)
				end
				local bool_11 = 0
				local bool_11_pos_1 = alloc(1)
				len_10 = len_10 + 1
				local len_11 = #k_5
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_11)
				alloc(len_11)
				buffer.writestring(outgoing_buff, outgoing_apos, k_5, len_11)
				if v_5 ~= nil then
					bool_11 = bit32.bor(bool_11, 0b0000000000000001)
					table.insert(outgoing_inst, v_5)
				end
				buffer.writeu8(outgoing_buff, bool_11_pos_1, bool_11)
			end
			if len_pos_5 then
				buffer.writeu16(outgoing_buff, len_pos_5, len_10 - 1)
			else
				bool_10 = bit32.bor(bool_10, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_10_pos_1, bool_10)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RequestSessionState = {
		On = function(Callback: (Player: Player) -> ()): () -> ()
			table.insert(reliable_events[0], Callback)
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	PlayerSessionSync = {
		Fire = function(Player: Player, Value: ({ [(string)]: ((unknown)) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_12 = 0
			local bool_12_pos_1 = alloc(1)
			local len_pos_6
			local len_12 = 0
			for k_6, v_6 in Value do
				if len_12 == 0 then
					len_pos_6 = alloc(2)
				end
				local bool_13 = 0
				local bool_13_pos_1 = alloc(1)
				len_12 = len_12 + 1
				local len_13 = #k_6
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_13)
				alloc(len_13)
				buffer.writestring(outgoing_buff, outgoing_apos, k_6, len_13)
				if v_6 ~= nil then
					bool_13 = bit32.bor(bool_13, 0b0000000000000001)
					table.insert(outgoing_inst, v_6)
				end
				buffer.writeu8(outgoing_buff, bool_13_pos_1, bool_13)
			end
			if len_pos_6 then
				buffer.writeu16(outgoing_buff, len_pos_6, len_12 - 1)
			else
				bool_12 = bit32.bor(bool_12, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_12_pos_1, bool_12)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_14 = 0
			local bool_14_pos_1 = alloc(1)
			local len_pos_7
			local len_14 = 0
			for k_7, v_7 in Value do
				if len_14 == 0 then
					len_pos_7 = alloc(2)
				end
				local bool_15 = 0
				local bool_15_pos_1 = alloc(1)
				len_14 = len_14 + 1
				local len_15 = #k_7
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_15)
				alloc(len_15)
				buffer.writestring(outgoing_buff, outgoing_apos, k_7, len_15)
				if v_7 ~= nil then
					bool_15 = bit32.bor(bool_15, 0b0000000000000001)
					table.insert(outgoing_inst, v_7)
				end
				buffer.writeu8(outgoing_buff, bool_15_pos_1, bool_15)
			end
			if len_pos_7 then
				buffer.writeu16(outgoing_buff, len_pos_7, len_14 - 1)
			else
				bool_14 = bit32.bor(bool_14, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_14_pos_1, bool_14)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_16 = 0
			local bool_16_pos_1 = alloc(1)
			local len_pos_8
			local len_16 = 0
			for k_8, v_8 in Value do
				if len_16 == 0 then
					len_pos_8 = alloc(2)
				end
				local bool_17 = 0
				local bool_17_pos_1 = alloc(1)
				len_16 = len_16 + 1
				local len_17 = #k_8
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_17)
				alloc(len_17)
				buffer.writestring(outgoing_buff, outgoing_apos, k_8, len_17)
				if v_8 ~= nil then
					bool_17 = bit32.bor(bool_17, 0b0000000000000001)
					table.insert(outgoing_inst, v_8)
				end
				buffer.writeu8(outgoing_buff, bool_17_pos_1, bool_17)
			end
			if len_pos_8 then
				buffer.writeu16(outgoing_buff, len_pos_8, len_16 - 1)
			else
				bool_16 = bit32.bor(bool_16, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_16_pos_1, bool_16)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_18 = 0
			local bool_18_pos_1 = alloc(1)
			local len_pos_9
			local len_18 = 0
			for k_9, v_9 in Value do
				if len_18 == 0 then
					len_pos_9 = alloc(2)
				end
				local bool_19 = 0
				local bool_19_pos_1 = alloc(1)
				len_18 = len_18 + 1
				local len_19 = #k_9
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_19)
				alloc(len_19)
				buffer.writestring(outgoing_buff, outgoing_apos, k_9, len_19)
				if v_9 ~= nil then
					bool_19 = bit32.bor(bool_19, 0b0000000000000001)
					table.insert(outgoing_inst, v_9)
				end
				buffer.writeu8(outgoing_buff, bool_19_pos_1, bool_19)
			end
			if len_pos_9 then
				buffer.writeu16(outgoing_buff, len_pos_9, len_18 - 1)
			else
				bool_18 = bit32.bor(bool_18, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_18_pos_1, bool_18)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ({ [(string)]: ((unknown)) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_20 = 0
			local bool_20_pos_1 = alloc(1)
			local len_pos_10
			local len_20 = 0
			for k_10, v_10 in Value do
				if len_20 == 0 then
					len_pos_10 = alloc(2)
				end
				local bool_21 = 0
				local bool_21_pos_1 = alloc(1)
				len_20 = len_20 + 1
				local len_21 = #k_10
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_21)
				alloc(len_21)
				buffer.writestring(outgoing_buff, outgoing_apos, k_10, len_21)
				if v_10 ~= nil then
					bool_21 = bit32.bor(bool_21, 0b0000000000000001)
					table.insert(outgoing_inst, v_10)
				end
				buffer.writeu8(outgoing_buff, bool_21_pos_1, bool_21)
			end
			if len_pos_10 then
				buffer.writeu16(outgoing_buff, len_pos_10, len_20 - 1)
			else
				bool_20 = bit32.bor(bool_20, 0b0000000000000001)
			end
			buffer.writeu8(outgoing_buff, bool_20_pos_1, bool_20)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	CreateWeapon = {
		SetCallback = function(Callback: (Player: Player, name: (string)) -> (("success" | "fail"))): () -> ()
			reliable_events[1] = Callback
			return function()
				reliable_events[1] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
